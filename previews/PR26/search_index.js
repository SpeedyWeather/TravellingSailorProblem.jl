var documenterSearchIndex = {"docs":
[{"location":"destination/#Destination","page":"Destination","title":"Destination","text":"","category":"section"},{"location":"destination/","page":"Destination","title":"Destination","text":"A Destionation is a SpeedyWeather callback that will check after every time step how close particles (see Particle advection) are and decide whether one particle reached that destination (within a given radius) and mark itself as reached and deactivate that particle.","category":"page"},{"location":"destination/#Predefined-destinations","page":"Destination","title":"Predefined destinations","text":"","category":"section"},{"location":"destination/","page":"Destination","title":"Destination","text":"For the TravellingSailorProblem there are 26 predefined destinations. In analogy to delivering Christmas presents to children around the world these are","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"using TravellingSailorProblem\nchildren = TravellingSailorProblem.children(26)","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"Their names are in alphabetical order for easier identification when Visualising destinations, their respective locations are the same for every user of TravellingSailorProblem. Initially they are set to reached=false as they haven't received any parcels (=Christmas present) yet.  You can create fewer destinations which will just pick the first N of those 26, e.g.","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"children = TravellingSailorProblem.children(5)","category":"page"},{"location":"destination/#Visualising-destinations","page":"Destination","title":"Visualising destinations","text":"","category":"section"},{"location":"destination/","page":"Destination","title":"Destination","text":"The 26 destinations (children) are somewhat uniformly distributed all over the globe in various places (all on land). You can visualise those locations with","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"using TravellingSailorProblem, GLMakie, GeoMakie\n\nchildren = TravellingSailorProblem.children(26)\nglobe(children)\nglobe(children, return_figure=true) # hide\nsave(\"destination26.png\", ans) # hide\nnothing # hide","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"(Image: )","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"which marks every destination (=child) with the first letter of their name. Choosing fewer children will only visualise those. If you want the perspective on a particular destination you can pass that on as perspective = destination, e.g. children[2] is a destination (children is a tuple of destinations) if you have at least 2 children defined","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"using TravellingSailorProblem, GLMakie, GeoMakie\n\nchildren = TravellingSailorProblem.children(26)\nglobe(children, perspective=children[2])\nglobe(children, perspective=children[2], return_figure=true) # hide\nsave(\"destination2.png\", ans) # hide\nnothing # hide","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"(Image: )","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"In this documentation that visualisation is static but if you do this in the Julia REPL you will get an interactive visualisation where you can rotate and zoom. You can also provide a perspective with coordinates, e.g. perspective = (0, 52) to look down onto London, UK.","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"You can also change the altitude, typical values are between 1e6 (country level) and 2e7 (global view), e.g. to zoom onto London do","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"globe(children, perspective=(0, 52), altitude=1e6)\nglobe(children, perspective=(0, 52), altitude=1e6, return_figure=true) # hide\nsave(\"destination_london.png\", ans) # hide\nnothing # hide","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"(Image: )","category":"page"},{"location":"destination/","page":"Destination","title":"Destination","text":"By default a \"shadow\" is visualised below each destination to illustrate its radius a particle has to reach for the destination to be marked \"reached\". Unreached/missed destinations are marked in yellow but they turn purple if a particle gets within the radius!","category":"page"},{"location":"particles/#Particle-advection","page":"Particle advection","title":"Particle advection","text":"","category":"section"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"There are several steps for particle advection in SpeedyWeather. Particle advection in general is described in more detail in","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"Particle advection","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"Generally we do,","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"using TravellingSailorProblem, SpeedyWeather\n\n# how many particles do you want when creating a spectral grid\nspectral_grid = SpectralGrid(nparticles=10)\n\n# create a particle advection component, choose the layer it's on\nparticle_advection = ParticleAdvection2D(spectral_grid, layer=8)\n\n# pass the particle advection to the model constructor\nmodel = PrimitiveWetModel(spectral_grid; particle_advection)\n\n# define particle tracker and add to the model\nparticle_tracker = ParticleTracker(spectral_grid)\nadd!(model, :particle_tracker => particle_tracker)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"which is now explained in more detail","category":"page"},{"location":"particles/#nparticles","page":"Particle advection","title":"nparticles","text":"","category":"section"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"In SpeedyWeather, creating a spectral_grid means to choose the resolution so that every component knows of which size to allocate variables etc. Hence you have to decide here how many particles you want by passing on the nparticles keyword argument. The number of particles is then displayed","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"SpectralGrid(nparticles=100)","category":"page"},{"location":"particles/#ParticleAdvection2D","page":"Particle advection","title":"ParticleAdvection2D","text":"","category":"section"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"By default, SpeedyWeather does not advect any particles. So you have to create a ParticleAdvection2D component (there is no 3D, yet, sorry!) and the spectral_grid has to be passed on as the first argument so the particle advection knows how many particles to advect!","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"ParticleAdvection2D(spectral_grid, layer=8)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"As the advection is in 2D, on a given layer of a SpeedyWeather simulation (so don't choose it higher than nlayers in spectral_grid!) you can choose the layer here too. Layers are numbered 1 at the top of the atmosphere to nlayers near the surface. There are other options but we won't change those.","category":"page"},{"location":"particles/#Model-constructor","page":"Particle advection","title":"Model constructor","text":"","category":"section"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"In SpeedyWeather, PrimitiveWetModel is the model that solves the primitive equations (widely used for weather forecasting) with humidity. It takes the spectral_grid as the first argument and then keyword arguments for every non-default model component. If you look at model it's quite lenghty as it shows every single model component, from numerics, to output to parameterizations that are used inside a simulation. But now model.particle_advection is just the particle advection we just created, it also lives inside the model now!","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"model = PrimitiveWetModel(spectral_grid; particle_advection)\nmodel.particle_advection","category":"page"},{"location":"particles/#Particle-tracker","page":"Particle advection","title":"Particle tracker","text":"","category":"section"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"So far the particles would fly but their trajectory wouldn't be tracked. For that we create a particle tracker as follows, again passing on spectral_grid as the first argument","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"particle_tracker = ParticleTracker(spectral_grid)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"There's many options but we won't touch those or elaborate them here. Important is however that creating a particle tracker doesn't mean it's part of the model. For this we do","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"add!(model, :particle_tracker => particle_tracker)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"As the ParticleTracker is implemented as a callback you can provide a key (a name) for it, like here :particle_tracker but you could also give it your own key like :my_tracker or simply do","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"add!(model, particle_tracker)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"in which case a random key is chosen as printed with an [ Info: note. But beware now we have added the same particle_tracker twice but with two different keys in which case the same particle_tracker will be called twice on every time step – probably not a good idea. You can always check which callbacks you have added with","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"model.callbacks","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"and delete callbacks with delete!(model.callbacks, :key).  We delete one particle tracker by specifying its key, so that only the other one remains","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"delete!(model.callbacks, :particle_tracker)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"Note that also the children are implemented as callbacks so you will likely see a list of both Destinations (the children) and the particle tracker!","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"warn: Do not add one particle tracker twice with different keys\nOtherwise the second will interfere with the netCDF file created by the first.","category":"page"},{"location":"particles/#Visualising-trajectories","page":"Particle advection","title":"Visualising trajectories","text":"","category":"section"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"Now let us also add some children as destinations","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"children = TravellingSailorProblem.children(10)\nadd!(model, children)","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"which automatically uses their respective names as keys, you can check this with","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"model.callbacks","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"Now we still need to initialize the model to obtain a simulation and run it!","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"simulation = initialize!(model)\nrun!(simulation, period=Day(41))","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"After this is complete we can investigate the particle trajectories with globe passing on the particle tracker used and the children that were added to the model","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"using GLMakie, GeoMakie\nglobe(particle_tracker, children)\nglobe(particle_tracker, children, return_figure=true) # hide\nsave(\"trajectories1.png\", ans) # hide\nnothing # hide","category":"page"},{"location":"particles/","page":"Particle advection","title":"Particle advection","text":"(Image: )","category":"page"},{"location":"submissions/#List-of-submissions","page":"List of submissions","title":"List of submissions","text":"","category":"section"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"It follows the code and plot of the trajectories of all TravellingSailorProblem submissions to /submissions sorted in alphabetical order of the filename.","category":"page"},{"location":"submissions/#Milan:-All-26-random","page":"List of submissions","title":"Milan: All 26 random","text":"","category":"section"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"path: /submissions/all_random.jl","category":"page"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"rank: 1. of 3 submissions","category":"page"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"name = \"Milan\"\ndescription = \"All 26 random\"\n\nnchildren = 26      # [1, 26]\nlayer = 7           # [1, 8], 1 is top layer, 8 is surface layer\n\n# 26 random locations (lon, lat) in degrees ˚E, ˚N\ndepartures = [\n    (322.34,  62.20),\n    (100.16, -51.68),\n    ( 44.30, -27.89),\n    (105.32, -19.22),\n    (354.02,  68.25),\n    ( 79.60,  28.18),\n    ( 21.45,  37.36),\n    (270.17,  47.94),\n    ( 99.39,  20.99),\n    (186.29, -55.38),\n    (270.93,  -2.89),\n    (346.22, -65.58),\n    (272.65,  32.82),\n    (174.54, -51.99),\n    (358.22, -32.65),\n    ( 73.29,  27.31),\n    ( 35.74,  67.60),\n    (356.70,  45.61),\n    (238.86, -10.03),\n    ( 94.67, -19.18),\n    ( 94.02, -46.96),\n    (256.61,  24.72),\n    ( 39.68,  34.94),\n    ( 87.61,   9.33),\n    ( 77.99, -26.93),\n    (292.05,  40.39),\n]\nnothing # hide","category":"page"},{"location":"submissions/#Milan:-Way-too-close!","page":"List of submissions","title":"Milan: Way too close!","text":"","category":"section"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"path: /submissions/superclose.jl","category":"page"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"rank: 2. of 3 submissions","category":"page"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"name = \"Milan\"\ndescription = \"Way too close!\"\n\nnchildren = 10      # [1, 26]\nlayer = 1           # [1, 8], 1 is top layer, 8 is surface layer\n\n# Locations (lon, lat) in degrees ˚E, ˚N of the first 10 children\ndepartures = [\n    (-157.8,  21.3),\n    ( 158.7,  53.0),\n    ( -74.1,   4.7),\n    ( 151.2, -33.9),\n    (  85.3,  27.7),\n    ( 106.9,  47.9),\n    ( -96.7,  17.1),\n    ( 115.9, -31.9),\n    (  -7.6,  33.6),\n    ( 139.7,  35.7),\n]\nnothing # hide","category":"page"},{"location":"submissions/#Milan:-Superclose-random-perturbation","page":"List of submissions","title":"Milan: Superclose + random perturbation","text":"","category":"section"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"path: /submissions/superclose_perturbation.jl","category":"page"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"rank: 3. of 3 submissions","category":"page"},{"location":"submissions/","page":"List of submissions","title":"List of submissions","text":"name = \"Milan\"\ndescription = \"Superclose + random perturbation\"\n\nnchildren = 5       # [1, 26]\nlayer = 5           # [1, 8], 1 is top layer, 8 is surface layer\n\n# Locations (lon, lat) in degrees ˚E, ˚N of the first 10 children\ndepartures = [\n    (-157.8,  21.3),\n    ( 158.7,  53.0),\n    ( -74.1,   4.7),\n    ( 151.2, -33.9),\n    (  85.3,  27.7),\n]\n\n# perturb with std dev of 1 degree\nσ = 1\nfor i in eachindex(departures)\n    lon, lat = departures[i]\n    departures[i] = (lon + σ*randn(), lat + σ*randn())\nend\nnothing # hide","category":"page"},{"location":"instructions/#TravellingSailorProblem-instructions","page":"Instructions","title":"TravellingSailorProblem instructions","text":"","category":"section"},{"location":"instructions/#General-workflow-to-run-SpeedyWeather","page":"Instructions","title":"General workflow to run SpeedyWeather","text":"","category":"section"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"There's more information in the SpeedyWeather documentation but in short there are 4 steps","category":"page"},{"location":"instructions/","page":"Instructions","title":"Instructions","text":"using SpeedyWeather\n\n# 1. define the resolution\nspectral_grid = SpectralGrid(trunc=31, nlayers=8)\n\n# 2. create a model\nmodel = PrimitiveWetModel(spectral_grid)\n\n# 3. initialize the model\nsimulation = initialize!(model)\n\n# 4. run the model\nrun!(simulation, period=Day(10))","category":"page"},{"location":"new_to_julia/#New-to-Julia?","page":"New to Julia?","title":"New to Julia?","text":"","category":"section"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"The following lists some useful links if you are new to Julia and want to use TravellingSailorProblem.jl and SpeedyWeather.jl for education or research.","category":"page"},{"location":"new_to_julia/#Install-Julia","page":"New to Julia?","title":"Install Julia","text":"","category":"section"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"First of all you have to install Julia, the recommended way is using the installation manager for Julia called Juliaup, see here","category":"page"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"Install Julia","category":"page"},{"location":"new_to_julia/#Julia-kernel-for-Jupyter-notebooks","page":"New to Julia?","title":"Julia kernel for Jupyter notebooks","text":"","category":"section"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"Then you may want to use Julia inside Jupyter Notebooks (the \"Ju\" in \"Jupyter\" is for Julia!) for this you need to install IJulia which you can do through Julia's built-in package manager Pkg.jl, this is as easy as","category":"page"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"julia> ] add IJulia","category":"page"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"where ] opens the package manger. After this installing a Julia kernel for Jupyter is just","category":"page"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"julia> using IJulia\njulia> installkernel(\"Julia\")","category":"page"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"and you can choose \"Julia\" as a kernel in a Jupyter notebook.","category":"page"},{"location":"new_to_julia/#Julia-documentation,-tutorials-and-community-resources","page":"New to Julia?","title":"Julia documentation, tutorials and community resources","text":"","category":"section"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"JuliaLang documentation, particularly\nDifferences from Matlab/R/Python\nLearn Julia in y minutes\nJulia's discourse forum\nJoin the Julia slack and Zulip channel\nJulia's YouTube channel\nTutorials and books","category":"page"},{"location":"new_to_julia/#SpeedyWeather-documentation","page":"New to Julia?","title":"SpeedyWeather documentation","text":"","category":"section"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"Because TravellingSailorProblem.jl is built on top of SpeedyWeather.jl do have a look at the documentation therein which explains how to run and modify SpeedyWeather.","category":"page"},{"location":"new_to_julia/","page":"New to Julia?","title":"New to Julia?","text":"SpeedyWeather.jl documentation","category":"page"},{"location":"submit/#Submit-to-the-TravellingSailorProblem","page":"Submit","title":"Submit to the TravellingSailorProblem","text":"","category":"section"},{"location":"submit/","page":"Submit","title":"Submit","text":"The easiest is to have a look a existing submissions listed in List of submissions and get some inspirations from TravellingSailorProblem instructions. Submit by creating a pull request adding a julia script file_name.jl in the folder /submissions of the repository. This script contains ...","category":"page"},{"location":"submit/","page":"Submit","title":"Submit","text":"The author and description strings are used in the List of submissions and the Leaderboard.","category":"page"},{"location":"submit/#Rules","page":"Submit","title":"Rules","text":"","category":"section"},{"location":"submit/","page":"Submit","title":"Submit","text":"Everything goes!","category":"page"},{"location":"functions_types/#Functions-and-types","page":"Functions and types","title":"Functions and types","text":"","category":"section"},{"location":"functions_types/","page":"Functions and types","title":"Functions and types","text":"","category":"page"},{"location":"functions_types/#TravellingSailorProblem.DESTINATION_RADIUS","page":"Functions and types","title":"TravellingSailorProblem.DESTINATION_RADIUS","text":"DESTINATION_RADIUS = 100_000\n\nThe default radius (in meters) around a destination that a particle must reach to be  considered as having arrived at the destination.\n\n\n\n\n\n","category":"constant"},{"location":"functions_types/#TravellingSailorProblem.NCHILDREN","page":"Functions and types","title":"TravellingSailorProblem.NCHILDREN","text":"NCHILDREN = 10\n\nThe default number of destinations/particles to create when using the children() function.\n\n\n\n\n\n","category":"constant"},{"location":"functions_types/#TravellingSailorProblem.Destination","page":"Functions and types","title":"TravellingSailorProblem.Destination","text":"Destination{NF} <: SpeedyWeather.AbstractCallback\n\nA callback structure representing a geographical destination that particles can reach. Tracks when particles arrive within a specified radius of the destination. Fields are \n\nlonlat::Tuple{NF, NF} where NF: Longitude and latitude coordinates of the destination\nname::Symbol: Name of the destination\nradius::Any: Radius (in meters) around the destination for arrival detection\nreached::Bool: Flag indicating whether the destination has been reached\nparticle::Int64: Index of the particle that reached the destination\nclosest_distance::Any: Minimum distance from any particle to the destination\nclosest_particle::Int64: Index of the particle currently closest to the destination\nverbose::Bool: Whether to print messages when destination is reached\n\n\n\n\n\n","category":"type"},{"location":"functions_types/#TravellingSailorProblem.Destination-Tuple{SpectralGrid}","page":"Functions and types","title":"TravellingSailorProblem.Destination","text":"Destination(\n    SG::SpectralGrid;\n    kwargs...\n) -> Destination{<:AbstractFloat}\n\n\nConstructor for creating a Destination with a specific number format (NF) from a SpectralGrid.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#TravellingSailorProblem.NF","page":"Functions and types","title":"TravellingSailorProblem.NF","text":"NF = Float32\n\nThe default numeric type (Float32) for destination coordinates.\n\n\n\n\n\n","category":"type"},{"location":"functions_types/#Base.show-Union{Tuple{N}, Tuple{IO, NTuple{N, var\"#s12\"} where var\"#s12\"<:Destination}} where N","page":"Functions and types","title":"Base.show","text":"show(\n    io::IO,\n    ds::NTuple{N, var\"#s12\"} where var\"#s12\"<:Destination\n)\n\n\nPretty-print a tuple of destinations on separate lines.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#RingGrids.globe-Union{Tuple{NTuple{N, var\"#s3\"} where var\"#s3\"<:Destination}, Tuple{N}, Tuple{NTuple{N, var\"#s2\"} where var\"#s2\"<:Destination, Union{Nothing, ParticleTracker}}} where N","page":"Functions and types","title":"RingGrids.globe","text":"globe(\n    destinations::NTuple{N, var\"#s3\"} where var\"#s3\"<:Destination;\n    ...\n) -> Any\nglobe(\n    destinations::NTuple{N, var\"#s2\"} where var\"#s2\"<:Destination,\n    particle_tracker::Union{Nothing, ParticleTracker};\n    background,\n    coastlines,\n    interactive,\n    shadows,\n    track_labels,\n    track_numbers,\n    legend,\n    altitude_tracks,\n    altitude_destinations,\n    perspective,\n    altitude,\n    size,\n    return_figure\n) -> Any\n\n\nCreate a 3D interactive or static globe visualization of particle tracks and destinations.\n\nDisplays a spherical Earth background with particle trajectories and destination markers.  Destinations are shown as hexagons (unreached) or filled (reached), with the first letter as a marker. Particle tracks are drawn as 3D lines with optional shadows and track endpoints.\n\nArguments\n\ndestinations::NTuple{N, <:Destination}: Tuple of destination objects to display\nparticle_tracker::Union{Nothing, ParticleTracker}: Optional particle trajectory data from NetCDF file\nbackground::Bool: Show Earth background image (default: true)\ncoastlines::Bool: Draw coastlines (default: true)\ninteractive::Bool: Enable interactive 3D globe (GlobeAxis) or static orthographic view (default: true)\nshadows::Bool: Draw ground shadows for tracks and destinations (default: true)\ntrack_labels::Bool: Show particle endpoint markers and numbers (default: true)\ntrack_numbers::Bool: Display particle numbers at endpoints (default: true)\nlegend::Bool: Show legend with reached/missed status (default: true)\naltitude_tracks: Altitude offset for particle tracks in meters (default: 200000)\naltitude_destinations: Altitude offset for destination markers in meters (default: 200000)\nperspective: View center as (lon, lat) tuple or Destination object (default: (0, 0))\naltitude: Camera altitude for interactive view in meters (default: 1.2e7)\nsize::Tuple: Figure size as (width, height) in pixels (default: (500, 500))\nreturn_figure::Bool: Return figure object instead of displaying (default: false)\n\nReturns\n\nFigure if return_figure=true, otherwise displays the figure and returns nothing\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#RingGrids.globe-Union{Tuple{N}, Tuple{ParticleTracker, NTuple{N, var\"#s9\"} where var\"#s9\"<:Destination}} where N","page":"Functions and types","title":"RingGrids.globe","text":"globe(\n    particle_tracker::ParticleTracker,\n    destinations::NTuple{N, var\"#s9\"} where var\"#s9\"<:Destination;\n    kwargs...\n) -> Any\n\n\nMake destinations and particle_tracker arguments commutative by calling the main implementation with swapped argument order.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#SpeedyWeather.add!-Tuple{AbstractModel, Vararg{Destination}}","page":"Functions and types","title":"SpeedyWeather.add!","text":"add!(\n    model::AbstractModel,\n    destinations::Destination...\n) -> Any\n\n\nAdd one or more destinations as callbacks to a model.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#SpeedyWeather.add!-Tuple{Dict{Symbol, SpeedyWeather.AbstractCallback}, Vararg{Destination}}","page":"Functions and types","title":"SpeedyWeather.add!","text":"add!(\n    callbacks::Dict{Symbol, SpeedyWeather.AbstractCallback},\n    destinations::Destination...\n)\n\n\nAdd one or more destinations to the callbacks dictionary using their name as the key.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#SpeedyWeather.add!-Union{Tuple{N}, Tuple{Any, NTuple{N, var\"#s12\"} where var\"#s12\"<:Destination}} where N","page":"Functions and types","title":"SpeedyWeather.add!","text":"add!(\n    to,\n    destinations::NTuple{N, var\"#s12\"} where var\"#s12\"<:Destination\n) -> Any\n\n\nUnpack a tuple of destinations and add each one individually to the target.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#SpeedyWeather.callback!-Tuple{Destination, PrognosticVariables, DiagnosticVariables, AbstractModel}","page":"Functions and types","title":"SpeedyWeather.callback!","text":"callback!(\n    destination::Destination,\n    progn::PrognosticVariables,\n    diagn::DiagnosticVariables,\n    model::AbstractModel\n)\n\n\nMain callback function that checks if any particle has reached the destination. Tracks closest particle and deactivates it when reaching the destination.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#TravellingSailorProblem.children-Union{Tuple{}, Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T","page":"Functions and types","title":"TravellingSailorProblem.children","text":"children(; ...) -> Tuple{Vararg{Destination{Float32}}}\nchildren(n; ...) -> Tuple\nchildren(n, ::Type{T}; kwargs...) -> Tuple\n\n\nCreate a tuple of n destinations with predefined locations and names from PLACES and NAMES.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#TravellingSailorProblem.destination_format-Tuple{Destination}","page":"Functions and types","title":"TravellingSailorProblem.destination_format","text":"destination_format(\n    d::Destination\n) -> Tuple{String, String, String}\n\n\nFormat a destination's information for display as (name, lon, lat) strings.\n\n\n\n\n\n","category":"method"},{"location":"functions_types/#TravellingSailorProblem.shortstring-Tuple{Destination}","page":"Functions and types","title":"TravellingSailorProblem.shortstring","text":"shortstring(d::Destination) -> String\n\n\nGenerate a compact string representation of a destination.\n\n\n\n\n\n","category":"method"},{"location":"#TravellingSailorProblem","page":"Home","title":"TravellingSailorProblem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TravellingSailorProblem, a repository to fly particles (like balloons) inside a SpeedyWeather.jl simulation. ","category":"page"},{"location":"#The-Problem","page":"Home","title":"The Problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The actual problem is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reach N destinations with particles flying with the wind as far as possible or at least get as close as possible to the destinations. There will be positive points for longer distances particles have flown before reaching their destination and negative points proportional to the closest any particle ever came to that destination.","category":"page"},{"location":"","page":"Home","title":"Home","text":"So it's only vaguely related to the Travelling Salesman problem which is about minimizing a path you can choose. Here it's about maximising a path determined by the (turbulent) wind field but you can choose the starting point.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contents","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installation\nNew to Julia?\nDestination\nParticle advection including Visualising trajectories\nTravellingSailorProblem instructions\nSubmit to the TravellingSailorProblem\nTravellingSailorProblem leaderboard\nList of submissions","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TravellingSailorProblem.jl is not yet a registered Julia packge so from the Julia REPL do","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add https://github.com/SpeedyWeather/TravellingSailorProblem.jl#main","category":"page"},{"location":"","page":"Home","title":"Home","text":"where ] opens Julia's package manager interactively, and #main to install the current main branch. Alternatively you can do","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/SpeedyWeather/TravellingSailorProblem.jl\", rev=\"main\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"SpeedyWeather is automatically installed as a dependency but to have it explicitly available just do add SpeedyWeather. For visualisation you have to choose a backend for Makie, e.g. do","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] add GLMakie","category":"page"},{"location":"","page":"Home","title":"Home","text":"alternatively you can use WGLMakie.  Don't use CairoMakie, as it will not render the 3D properties correctly.","category":"page"},{"location":"evaluation/#Evaluation","page":"Evaluation","title":"Evaluation","text":"","category":"section"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"To evaluate how many destionations you reached, delivering Christmas presents to the respective children after the simulation ran, do","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"evaluate(particle_tracker, children)","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"Within the whole setup this is","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"using TravellingSailorProblem, SpeedyWeather\n\nnchildren = 26\nspectral_grid = SpectralGrid(nparticles=nchildren, nlayers=8)\nparticle_advection = ParticleAdvection2D(spectral_grid, layer=8)\nmodel = PrimitiveWetModel(spectral_grid; particle_advection)\nsimulation = initialize!(model, time=DateTime(2025, 11, 13))\n\n# define children and add to the model as destinations\nchildren = TravellingSailorProblem.children(nchildren)\nadd!(model, children)\n\n# define particle tracker and add to the model\nparticle_tracker = ParticleTracker(spectral_grid)\nadd!(model, :particle_tracker => particle_tracker)\n\nrun!(simulation, period=Day(41))\n\nevaluate(particle_tracker, children)","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"And the last line will print you a list of all children and whether they have been reached or not, the respective points you got from each child (positive for reached, negative for missed) and a summary of points. The aim of the TravellingSailorProblem is to maximize the amount of points by reaching as many children as possible with particles flying as far as possible before reaching a child.","category":"page"},{"location":"evaluation/#Point-system","page":"Evaluation","title":"Point system","text":"","category":"section"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"We give","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"TravellingSailorProblem.POINTS_PER_KM_REACHED","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"positive point(s) for each km a particle flew before reaching its destination. A child would get more excited the further  their Christmas present flew? Imagine you get a Christmas present that flew through both the Arctic as well as Antarctica!","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"However, if a child doesn't get a Christmas present we give","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"TravellingSailorProblem.POINTS_PER_KM_MISSED","category":"page"},{"location":"evaluation/","page":"Evaluation","title":"Evaluation","text":"(note: NEGATIVE!) points for every km the closest particle ever was to a child. If you live on Hawai'i and no particle doesn't even get near you, you would also be pretty disappointed no? This incetivises you to get as close as possible to a child and you get less penalised if you barely miss it compared to not even trying to fly a present near it!","category":"page"},{"location":"leaderboard/#TravellingSailorProblem-leaderboard","page":"Leaderboard","title":"TravellingSailorProblem leaderboard","text":"","category":"section"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"The TravellingSailorProblem leaderboard ranks submissions in /submissions to the TravellingSailorProblem by the amount of precipitation measured in a given location and over a certain period. To Submit to the TravellingSailorProblem see that section of the docs and particular the rules and formalities explained within. Also see List of submissions for a list of all submissions, their respective code and trajectory plots Visualising trajectories.","category":"page"},{"location":"leaderboard/#Leaderboard","page":"Leaderboard","title":"Leaderboard","text":"","category":"section"},{"location":"leaderboard/","page":"Leaderboard","title":"Leaderboard","text":"Rank Author Description Layer Destinations reached Points\n1 Milan All 26 random 7 0/26 0\n2 Milan Way too close! 1 0/10 0\n3 Milan Superclose + random perturbation 5 0/5 0","category":"page"}]
}
